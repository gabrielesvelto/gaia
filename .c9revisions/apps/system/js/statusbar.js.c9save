{"ts":1358085950721,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n\n'use strict';\n\nvar StatusBar = {\n  /* all elements that are children nodes of the status bar */\n  ELEMENTS: ['notification', 'time',\n    'battery', 'wifi', 'data', 'flight-mode', 'signal', 'network-activity',\n    'tethering', 'alarm', 'bluetooth', 'mute', 'headphones',\n    'recording', 'sms', 'geolocation', 'usb', 'label', 'system-downloads',\n    'call-forwarding'],\n\n  /* Timeout for 'recently active' indicators */\n  kActiveIndicatorTimeout: 60 * 1000,\n\n  /* Whether or not status bar is actively updating or not */\n  active: true,\n\n  /* Some values that sync from mozSettings */\n  settingValues: {},\n\n  /* Keep the DOM element references here */\n  icons: {},\n\n  /* A mapping table between technology names\n     we would get from API v.s. the icon we want to show. */\n  mobileDataIconTypes: {\n    'lte': '4G', // 4G LTE\n    'ehrpd': '4G', // 4G CDMA\n    'hspa+': 'H+', // 3.5G HSPA+\n    'hsdpa': 'H', 'hsupa': 'H', 'hspa': 'H', // 3.5G HSDPA\n    'evdo0': '3G', 'evdoa': '3G', 'evdob': '3G', '1xrtt': '3G', // 3G CDMA\n    'umts': '3G', // 3G\n    'edge': 'E', // EDGE\n    'is95a': '2G', 'is95b': '2G', // 2G CDMA\n    'gprs': '2G'\n  },\n\n  geolocationActive: false,\n  geolocationTimer: null,\n\n  recordingActive: false,\n  recordingTimer: null,\n\n  umsActive: false,\n\n  headphonesActive: false,\n\n  /**\n   * this keeps how many current installs/updates we do\n   * it triggers the icon \"systemDownloads\"\n   */\n  systemDownloadsCount: 0,\n\n  /* For other modules to acquire */\n  get height() {\n    if (this.screen.classList.contains('fullscreen-app') ||\n        document.mozFullScreen) {\n      return 0;\n    } else if (this.screen.classList.contains('active-statusbar')) {\n      return this.attentionBar.offsetHeight;\n    } else {\n      return this.element.offsetHeight;\n    }\n  },\n\n  init: function sb_init() {\n    this.getAllElements();\n\n    var settings = {\n      'ril.radio.disabled': ['signal', 'data'],\n      'ril.data.enabled': ['data'],\n      'wifi.enabled': ['wifi'],\n      'bluetooth.enabled': ['bluetooth'],\n      'tethering.usb.enabled': ['tethering'],\n      'tethering.wifi.enabled': ['tethering'],\n      'tethering.wifi.connectedClients': ['tethering'],\n      'tethering.usb.connectedClients': ['tethering'],\n      'ring.enabled': ['mute'],\n      'alarm.enabled': ['alarm'],\n      'vibration.enabled': ['vibration'],\n      'ril.cf.unconditional.enabled': ['callForwarding']\n    };\n\n    var self = this;\n    for (var settingKey in settings) {\n      (function sb_setSettingsListener(settingKey) {\n        SettingsListener.observe(settingKey, false,\n          function sb_settingUpdate(value) {\n            self.settingValues[settingKey] = value;\n            settings[settingKey].forEach(\n              function sb_callUpdate(name) {\n                self.update[name].call(self);\n              }\n            );\n          }\n        );\n        self.settingValues[settingKey] = false;\n      })(settingKey);\n    }\n\n    // Listen to 'screenchange' from screen_manager.js\n    window.addEventListener('screenchange', this);\n\n    // Listen to 'geolocation-status' and 'recording-status' mozChromeEvent\n    window.addEventListener('mozChromeEvent', this);\n\n    // Listen to 'bluetoothconnectionchange' from bluetooth.js\n    window.addEventListener('bluetoothconnectionchange', this);\n\n    // Listen to 'moztimechange'\n    window.addEventListener('moztimechange', this);\n\n    this.systemDownloadsCount = 0;\n    this.setActive(true);\n  },\n\n  handleEvent: function sb_handleEvent(evt) {\n    switch (evt.type) {\n      case 'screenchange':\n        this.setActive(evt.detail.screenEnabled);\n        break;\n\n      case 'chargingchange':\n      case 'levelchange':\n      case 'statuschange':\n        this.update.battery.call(this);\n        break;\n\n      case 'voicechange':\n        this.update.signal.call(this);\n        this.update.label.call(this);\n        break;\n\n      case 'cardstatechange':\n        this.update.signal.call(this);\n        this.update.label.call(this);\n        this.update.data.call(this);\n        break;\n\n      case 'callschanged':\n        this.update.signal.call(this);\n        break;\n\n      case 'iccinfochange':\n        this.update.label.call(this);\n        break;\n\n      case 'datachange':\n        this.update.data.call(this);\n        break;\n\n      case 'bluetoothconnectionchange':\n        this.update.bluetooth.call(this);\n        break;\n\n      case 'moztimechange':\n        this.update.time.call(this);\n        break;\n\n      case 'mozChromeEvent':\n        switch (evt.detail.type) {\n          case 'geolocation-status':\n            this.geolocationActive = evt.detail.active;\n            this.update.geolocation.call(this);\n            break;\n\n          case 'recording-status':\n            this.recordingActive = evt.detail.active;\n            this.update.recording.call(this);\n            break;\n\n          case 'volume-state-changed':\n            this.umsActive = evt.detail.active;\n            this.update.usb.call(this);\n            break;\n\n          case 'headphones-status-changed':\n            this.headphonesActive = (evt.detail.state != 'off');\n            this.update.headphones.call(this);\n            break;\n        }\n\n        break;\n\n      case 'moznetworkupload':\n      case 'moznetworkdownload':\n        this.update.networkActivity.call(this);\n        break;\n    }\n  },\n\n  setActive: function sb_setActive(active) {\n    this.active = active;\n    if (active) {\n      this.update.time.call(this);\n\n      var battery = window.navigator.battery;\n      if (battery) {\n        battery.addEventListener('chargingchange', this);\n        battery.addEventListener('levelchange', this);\n        battery.addEventListener('statuschange', this);\n        this.update.battery.call(this);\n      }\n\n      var conn = window.navigator.mozMobileConnection;\n      if (conn) {\n        conn.addEventListener('voicechange', this);\n        conn.addEventListener('iccinfochange', this);\n        conn.addEventListener('datachange', this);\n        this.update.signal.call(this);\n        this.update.data.call(this);\n      }\n\n      window.addEventListener('wifi-statuschange',\n                              this.update.wifi.bind(this));\n      this.update.wifi.call(this);\n\n      window.addEventListener('moznetworkupload', this);\n      window.addEventListener('moznetworkdownload', this);\n    } else {\n      clearTimeout(this._clockTimer);\n\n      var battery = window.navigator.battery;\n      if (battery) {\n        battery.removeEventListener('chargingchange', this);\n        battery.removeEventListener('levelchange', this);\n        battery.removeEventListener('statuschange', this);\n      }\n\n      var conn = window.navigator.mozMobileConnection;\n      if (conn) {\n        conn.removeEventListener('voicechange', this);\n        conn.removeEventListener('iccinfochange', this);\n        conn.removeEventListener('datachange', this);\n      }\n\n      window.removeEventListener('moznetworkupload', this);\n      window.removeEventListener('moznetworkdownload', this);\n    }\n  },\n\n  update: {\n    label: function sb_updateLabel() {\n      var conn = window.navigator.mozMobileConnection;\n      var label = this.icons.label;\n      var l10nArgs = JSON.parse(label.dataset.l10nArgs || '{}');\n\n      if (!conn || !conn.voice || !conn.voice.connected ||\n          conn.voice.emergencyCallsOnly) {\n        delete l10nArgs.operator;\n        label.dataset.l10nArgs = JSON.stringify(l10nArgs);\n\n        label.dataset.l10nId = '';\n        label.textContent = l10nArgs.date;\n\n        return;\n      }\n\n      var operatorInfos = MobileOperator.userFacingInfo(conn);\n      l10nArgs.operator = operatorInfos.operator;\n\n      if (operatorInfos.region) {\n        l10nArgs.operator += ' ' + operatorInfos.region;\n      }\n\n      label.dataset.l10nArgs = JSON.stringify(l10nArgs);\n\n      label.dataset.l10nId = 'statusbarLabel';\n      label.textContent = navigator.mozL10n.get('statusbarLabel', l10nArgs);\n    },\n\n    time: function sb_updateTime() {\n      // Schedule another clock update when a new minute rolls around\n      var _ = navigator.mozL10n.get;\n      var f = new navigator.mozL10n.DateTimeFormat();\n      var now = new Date();\n      var sec = now.getSeconds();\n      if (this._clockTimer)\n        window.clearTimeout(this._clockTimer);\n      this._clockTimer =\n        window.setTimeout((this.update.time).bind(this), (59 - sec) * 1000);\n\n      var formated = f.localeFormat(now, _('shortTimeFormat'));\n      formated = formated.replace(/\\s?(AM|PM)\\s?/i, '<span>$1</span>');\n      this.icons.time.innerHTML = formated;\n\n      var label = this.icons.label;\n      var l10nArgs = JSON.parse(label.dataset.l10nArgs || '{}');\n      l10nArgs.date = f.localeFormat(now, _('statusbarDateFormat'));\n      label.dataset.l10nArgs = JSON.stringify(l10nArgs);\n      this.update.label.call(this);\n    },\n\n    battery: function sb_updateBattery() {\n      var battery = window.navigator.battery;\n      if (!battery)\n        return;\n\n      var icon = this.icons.battery;\n\n      icon.hidden = false;\n      icon.dataset.charging = battery.charging;\n      icon.dataset.level = Math.floor(battery.level * 10) * 10;\n    },\n\n    networkActivity: function sb_updateNetworkActivity() {\n      // Each time we receive an update, make network activity indicator\n      // show up for 500ms.\n\n      var icon = this.icons.networkActivity;\n\n      clearTimeout(this._networkActivityTimer);\n      icon.hidden = false;\n\n      this._networkActivityTimer = setTimeout(function hideNetActivityIcon() {\n        icon.hidden = true;\n      }, 500);\n    },\n\n    signal: function sb_updateSignal() {\n      var conn = window.navigator.mozMobileConnection;\n      if (!conn || !conn.voice)\n        return;\n\n      var voice = conn.voice;\n      var icon = this.icons.signal;\n      var flightModeIcon = this.icons.flightMode;\n      var _ = navigator.mozL10n.get;\n\n      if (this.settingValues['ril.radio.disabled']) {\n        // \"Airplane Mode\"\n        icon.hidden = true;\n        flightModeIcon.hidden = false;\n        return;\n      }\n\n      flightModeIcon.hidden = true;\n      icon.hidden = false;\n\n      if (conn.cardState === 'absent') {\n        // no SIM\n        delete icon.dataset.level;\n        delete icon.dataset.emergency;\n        delete icon.dataset.searching;\n        delete icon.dataset.roaming;\n      } else if (voice.connected || this.hasActiveCall()) {\n        // \"Carrier\" / \"Carrier (Roaming)\"\n        icon.dataset.level = Math.ceil(voice.relSignalStrength / 20); // 0-5\n        icon.dataset.roaming = voice.roaming;\n\n        delete icon.dataset.emergency;\n        delete icon.dataset.searching;\n      } else {\n        // \"No Network\" / \"Emergency Calls Only (REASON)\" / trying to connect\n        icon.dataset.level = -1;\n        // logically, we should have \"&& !voice.connected\" as well but we\n        // already know this.\n        icon.dataset.searching = (!voice.emergencyCallsOnly &&\n                                  voice.state !== 'notSearching');\n        icon.dataset.emergency = (voice.emergencyCallsOnly);\n        delete icon.dataset.roaming;\n      }\n\n      if (voice.emergencyCallsOnly) {\n        this.addCallListener();\n      } else {\n        this.removeCallListener();\n      }\n\n    },\n\n    data: function sb_updateSignal() {\n      var conn = window.navigator.mozMobileConnection;\n      if (!conn || !conn.data)\n        return;\n\n      var data = conn.data;\n      var icon = this.icons.data;\n\n      if (this.settingValues['ril.radio.disabled'] ||\n          !this.settingValues['ril.data.enabled'] ||\n          !this.icons.wifi.hidden || !data.connected) {\n        icon.hidden = true;\n\n        return;\n      }\n\n      icon.hidden = false;\n      icon.dataset.type =\n        this.mobileDataIconTypes[data.type] || 'circle';\n    },\n\n\n    wifi: function sb_updateWifi() {\n      var wifiManager = window.navigator.mozWifiManager;\n      if (!wifiManager)\n        return;\n\n      var icon = this.icons.wifi;\n      var wasHidden = icon.hidden;\n\n      if (!this.settingValues['wifi.enabled']) {\n        icon.hidden = true;\n        if (!wasHidden)\n          this.update.data.call(this);\n\n        return;\n      }\n\n      switch (wifiManager.connection.status) {\n        case 'disconnected':\n          icon.hidden = true;\n\n          break;\n\n        case 'connecting':\n        case 'associated':\n          icon.hidden = false;\n          icon.dataset.connecting = true;\n          icon.dataset.level = 0;\n\n          break;\n\n        case 'connected':\n          icon.hidden = false;\n\n          var relSignalStrength =\n            wifiManager.connectionInformation.relSignalStrength;\n          icon.dataset.level = Math.floor(relSignalStrength / 25);\n\n          break;\n      }\n\n      if (icon.hidden !== wasHidden)\n        this.update.data.call(this);\n    },\n\n    tethering: function sb_updateTethering() {\n      var icon = this.icons.tethering;\n      icon.hidden = !(this.settingValues['tethering.usb.enabled'] ||\n                      this.settingValues['tethering.wifi.enabled']);\n\n      icon.dataset.active =\n        (this.settingValues['tethering.wifi.connectedClients'] !== 0) ||\n        (this.settingValues['tethering.usb.connectedClients'] !== 0);\n    },\n\n    bluetooth: function sb_updateBluetooth() {\n      var icon = this.icons.bluetooth;\n\n      icon.hidden = !this.settingValues['bluetooth.enabled'];\n      icon.dataset.active = Bluetooth.connected;\n    },\n\n    alarm: function sb_updateAlarm() {\n      this.icons.alarm.hidden = !this.settingValues['alarm.enabled'];\n    },\n\n    mute: function sb_updateMute() {\n      this.icons.mute.hidden =\n        (this.settingValues['ring.enabled'] == true);\n    },\n\n    vibration: function sb_vibration() {\n      var vibrate = (this.settingValues['vibration.enabled'] == true);\n      if (vibrate) {\n        this.icons.mute.classList.add('vibration');\n      } else {\n        this.icons.mute.classList.remove('vibration');\n      }\n    },\n\n    recording: function sb_updateRecording() {\n      window.clearTimeout(this.recordingTimer);\n\n      var icon = this.icons.recording;\n      icon.dataset.active = this.recordingActive;\n\n      if (this.recordingActive) {\n        // Geolocation is currently active, show the active icon.\n        icon.hidden = false;\n        return;\n      }\n\n      // Geolocation is currently inactive.\n      // Show the inactive icon and hide it after kActiveIndicatorTimeout\n      this.recordingTimer = window.setTimeout(function hideGeoIcon() {\n        icon.hidden = true;\n      }, this.kActiveIndicatorTimeout);\n    },\n\n    sms: function sb_updateSms() {\n      // We are not going to show this for v1\n\n      // this.icon.sms.hidden = ?\n      // this.icon.sms.dataset.num = ?;\n    },\n\n    geolocation: function sb_updateGeolocation() {\n      window.clearTimeout(this.geolocationTimer);\n\n      var icon = this.icons.geolocation;\n      icon.dataset.active = this.geolocationActive;\n\n      if (this.geolocationActive) {\n        // Geolocation is currently active, show the active icon.\n        icon.hidden = false;\n        return;\n      }\n\n      // Geolocation is currently inactive.\n      // Show the inactive icon and hide it after kActiveIndicatorTimeout\n      this.geolocationTimer = window.setTimeout(function hideGeoIcon() {\n        icon.hidden = true;\n      }, this.kActiveIndicatorTimeout);\n    },\n\n    usb: function sb_updateUsb() {\n      var icon = this.icons.usb;\n      icon.hidden = !this.umsActive;\n    },\n\n    headphones: function sb_updateHeadphones() {\n      var icon = this.icons.headphones;\n      icon.hidden = !this.headphonesActive;\n    },\n\n    systemDownloads: function sb_updatesystemDownloads() {\n      var icon = this.icons.systemDownloads;\n      icon.hidden = (this.systemDownloadsCount === 0);\n    },\n\n    callForwarding: function sb_updateCallForwarding() {\n      var icon = this.icons.callForwarding;\n      icon.hidden = !this.settingValues['ril.cf.unconditional.enabled'];\n    }\n  },\n\n  hasActiveCall: function sb_hasActiveCall() {\n    var telephony = navigator.mozTelephony;\n\n    // will return true as soon as we begin dialing\n    return !!(telephony && telephony.active);\n  },\n\n  addCallListener: function sb_addCallListener() {\n    var telephony = navigator.mozTelephony;\n    if (telephony) {\n      telephony.addEventListener('callschanged', this);\n    }\n  },\n\n  removeCallListener: function sb_addCallListener() {\n    var telephony = navigator.mozTelephony;\n    if (telephony) {\n      telephony.removeEventListener('callschanged', this);\n    }\n  },\n\n  updateNotification: function sb_updateNotification(count) {\n    var icon = this.icons.notification;\n    if (!count) {\n      icon.hidden = true;\n      return;\n    }\n\n    icon.hidden = false;\n    icon.dataset.num = count;\n  },\n\n  updateNotificationUnread: function sb_updateNotificationUnread(unread) {\n    this.icons.notification.dataset.unread = unread;\n  },\n\n  incSystemDownloads: function sb_incSystemDownloads() {\n    this.systemDownloadsCount++;\n    this.update.systemDownloads.call(this);\n  },\n\n  decSystemDownloads: function sb_decSystemDownloads() {\n    if (--this.systemDownloadsCount < 0) {\n      this.systemDownloadsCount = 0;\n    }\n\n    this.update.systemDownloads.call(this);\n  },\n\n  getAllElements: function sb_getAllElements() {\n    // ID of elements to create references\n\n    var toCamelCase = function toCamelCase(str) {\n      return str.replace(/\\-(.)/g, function replacer(str, p1) {\n        return p1.toUpperCase();\n      });\n    };\n\n    this.ELEMENTS.forEach((function createElementRef(name) {\n      this.icons[toCamelCase(name)] =\n        document.getElementById('statusbar-' + name);\n    }).bind(this));\n\n    this.element = document.getElementById('statusbar');\n    this.screen = document.getElementById('screen');\n    this.attentionBar = document.getElementById('attention-bar');\n  }\n};\n\nif (navigator.mozL10n.readyState == 'complete' ||\n    navigator.mozL10n.readyState == 'interactive') {\n  StatusBar.init();\n} else {\n  window.addEventListener('localized', StatusBar.init.bind(StatusBar));\n}\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":18070}]],"length":18070}
{"contributors":[],"silentsave":false,"ts":1358086314902,"patch":[[{"diffs":[[0,"rict';\n\n"],[1,"/**\n * Create an animated icon by using a canvas element coupled with a flat image\n * containing all the animation frames arranged as a vertical row. The delay\n * between each frame is fixed.\n */\n\nfunction AnimatedIcon(element, path, frames, delay) {\n  var self = this,\n    context = element.getContext('2d'),\n\t\timage = new Image();\n\n\tself.initialized = false;\n\tself.delay = delay;\n\tself.frame = 1;\n\tself.frames = frames;\n\tself.context = context;\n\tself.started = true;\n\n\t// Load the image and paint the first frame\n\tself.image = image;\n\timage.src = path;\n\timage.onload = function () {\n\t\tvar w = image.width / frames;\n\t\tvar h = image.height;\n\t\tself.started = false;\n\n\t\tcontext.drawImage(image, 0, 0, w, h, 0, 0, w, h);\n\t\tself.initialized = true;\n\n\t\tif(self.autostart){\n\t\t\tself.start();\n\t\t\tself.autostart = null;\n\t\t}\n\t};\n\n  self.start = function () {\n\t\tvar self = this;\n\n\t\tif(self.started){\n\t\t\treturn;\n\t\t}\n\n\t\tif(!self.initialized){\n\t\t\tself.autostart = true;\n\t\t\treturn;\n\t\t}\n\n\t\tself.start = window.mozAnimationStartTime;\n    self.started = true;\n    window.requestAnimationFrame(self.step.bind(self));\n\t},\n\n\tself.stop = function () {\n\t\tthis.autostart = null;\n\t\tthis.started = false;\n\t},\n\n\tself.step = function(timestamp) {\n\t\tvar self = this,\n        progress = timestamp - self.start;\n\n\t\tif(progress >= self.delay){\n\t\t\tvar w = self.image.width / self.frames,\n\t\t\t\th = self.image.height;\n\n\t\t\tself.context.drawImage(self.image, self.frame * w, 0, w, h, 0, 0, w, h);\n\t\t\tself.frame++;\n\n\t\t\tif(self.frame == self.frames) {\n\t\t\t\tself.frame = 0;\n\t\t\t}\n\n\t\t\tself.start = window.mozAnimationStartTime;\n\t\t}\n\n\t\tif(self.started){\n      window.requestAnimationFrame(self.step.bind(self));\n\t\t}\n\t};\n}\n\n"],[0,"var Stat"]],"start1":156,"start2":156,"length1":16,"length2":1694},{"diffs":[[0,"sCount: 0,\n\n"],[1,"  /* Objects used to animate the system downloads and network activity canvas elements */\n  networkActivityAnimation: null,\n  systemDownloadsAnimation: null,\n\n"],[0,"  /* For oth"]],"start1":3248,"start2":3248,"length1":24,"length2":183},{"diffs":[[0,"sCount = 0;\n"],[1,"\n    // Create the objects used to animate the statusbar-network-activity and\n    // statusbar-system-downloads canvas elements\n    this.networkActivityAnimation = new AnimatedIcon(this.icons.networkActivity,\n      \"style/statusbar/images/network-activity-flat.png\", 6, 200);\n    this.systemDownloadsAnimation = new AnimatedIcon(this.icons.systemDownloads,\n      \"style/statusbar/images/system-downloads-flat.png\", 8, 130);\n\n"],[0,"    this.set"]],"start1":5375,"start2":5375,"length1":24,"length2":449},{"diffs":[[0,"ctivity;"],[1,"\n      var animation = this.networkActivityAnimation;"],[0,"\n\n      "]],"start1":11699,"start2":11699,"length1":16,"length2":69},{"diffs":[[0,".hidden = false;"],[1,"\n      animation.start();"],[0,"\n\n      this._ne"]],"start1":11820,"start2":11820,"length1":32,"length2":57},{"diffs":[[0,"ctivityIcon() {\n"],[1,"        animation.stop();\n"],[0,"        icon.hid"]],"start1":11926,"start2":11926,"length1":32,"length2":58},{"diffs":[[0,"    "],[-1,"icon.hidden = (this.systemDownloadsCount === 0);"],[1,"var animation = this.systemDownloadsAnimation;\n\n      if (this.systemDownloadsCount > 0) {\n        icon.hidden = false;\n        animation.start();\n      } else {\n        animation.stop();\n        icon.hidden = true;\n      }"],[0,"\n   "]],"start1":18099,"start2":18099,"length1":56,"length2":231}]],"length":20611,"saved":false}
{"ts":1358086394701,"patch":[[{"diffs":[[0,"is,\n    "],[1,"  "],[0,"context "]],"start1":430,"start2":430,"length1":16,"length2":18},{"diffs":[[0,"('2d'),\n"],[-1,"\t\t"],[1,"      "],[0,"image = "]],"start1":468,"start2":468,"length1":18,"length2":22},{"diffs":[[0,"idth"],[-1," / frames"],[0,";\n\t\t"]],"start1":772,"start2":772,"length1":17,"length2":8},{"diffs":[[0,"e.height"],[1," / frames"],[0,";\n\t\tself"]],"start1":792,"start2":792,"length1":16,"length2":25},{"diffs":[[0,"d(self));\n\t}"],[-1,","],[1,";"],[0,"\n\n\tself.stop"]],"start1":1258,"start2":1258,"length1":25,"length2":25},{"diffs":[[0,"alse;\n\t}"],[-1,","],[1,";"],[0,"\n\n\tself."]],"start1":1343,"start2":1343,"length1":17,"length2":17},{"diffs":[[0,"idth"],[-1," / self.frames"],[0,",\n\t\t"]],"start1":1505,"start2":1505,"length1":22,"length2":8},{"diffs":[[0,"e.height"],[1," / self.frames"],[0,";\n\n\t\t\tse"]],"start1":1528,"start2":1528,"length1":16,"length2":30},{"diffs":[[0,"f.image,"],[1," 0,"],[0," self.fr"]],"start1":1582,"start2":1582,"length1":16,"length2":19},{"diffs":[[0,"e * "],[-1,"w, 0"],[1,"h"],[0,", w,"]],"start1":1603,"start2":1603,"length1":12,"length2":9}]],"length":20617,"saved":false}
